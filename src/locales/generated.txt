--- /home/runner/work/react-typescript/react-typescript/src/components/CalculatorV3/Count.tsx ---

import React, {useReducer} from 'react';


function counterReducer(count:number, action : {type:string}) {
    switch (action.type) {
        case 'increment':
            return count+1;
        case 'decrement':
            return count -1;
        case 'reset':
            return 0;
        default:
            throw count;
    }
}


function Count(props) {
    const [count, countDispatch] = useReducer(counterReducer,0);

    return (
        <>
            <h1>Count : {count}</h1>
            <button onClick={()=>countDispatch({type: "increment"})}>Increment</button>
            <button onClick={()=>countDispatch({type: "decrement"})}>Decrement</button>
            <button onClick={()=>countDispatch({type: "reset"})}>Reset</button>
        </>
    );
}

export default Count;

--- /home/runner/work/react-typescript/react-typescript/src/components/CalculatorV2/Count.tsx ---

import React, {useReducer, useState} from 'react';
import CountDisplay from "./CountDisplay";
import CountButton from "./CountButton";
import counterReducer from "../../reducer/counterReducer";

function Count() {

    const [count, countDispatch] = useReducer(counterReducer,0);

    const handleIncrement = () => countDispatch({type: "INCREMENT"});
    const handleDecrement = () => countDispatch({type: "DECREMENT"});
    const handleReset = () => countDispatch({type: "RESET"});


    return (
        <>
            <h3>This is Count App</h3>
            <CountDisplay count={count} />
            <CountButton
                handleIncrement={handleIncrement}
                handleDecrement={handleDecrement}
                handleReset={handleReset}
            />

        </>
    );
}

export default Count;

--- /home/runner/work/react-typescript/react-typescript/src/components/CalculatorV2/CountButton.tsx ---

import React, {Dispatch} from 'react';

interface CountButtonProps {
    handleIncrement: () => void;
    handleDecrement: () => void;
    handleReset: () => void;
}

function CountButton(props:CountButtonProps) {
    const {handleIncrement , handleDecrement , handleReset} = props;

    return (
        <>
            <button name="increment" onClick={handleIncrement}>increment</button>
            <button name="decrement" onClick={handleDecrement}>decrement</button>
            <button name="reset" onClick={handleReset}>reset</button>
        </>
    );
}

export default CountButton;

--- /home/runner/work/react-typescript/react-typescript/src/components/CalculatorV2/CountDisplay.tsx ---

import React from 'react';

interface CountDisplayProps {
    count: number;

}

function CountDisplay(props :CountDisplayProps) {
    const {count} = props;

    return (
        <>
            <h3>CountDisplay</h3>
            <p>count : {count}</p>
        </>
    );
}

export default CountDisplay;

--- /home/runner/work/react-typescript/react-typescript/src/components/Calculator/Calculator.tsx ---

import React from 'react';

function Calculator() {
    const [count, setCount] = React.useState<number>(0);

    const handleIncrement = () => {
        setCount(prevCount => prevCount + 1);
    }

    const handleDecrement = () => {
        setCount(prevCount => prevCount - 1);
    }

    const handleReset = () => {
        setCount(0);
    }


    return (
        <>
            <h1>Calculator Component</h1>
            <p>Count: {count}</p>
            <button onClick={handleIncrement}>Increment</button>
            <button onClick={handleDecrement}>Decrement</button>
            <button onClick={handleReset}>Reset</button>
        </>
    );
}

export default Calculator;

--- /home/runner/work/react-typescript/react-typescript/src/components/Button/ButtonGroup.tsx ---

import React, {useState} from 'react';
import Button from "./Button";
import styles from "./ButtonGroup.module.css";
import classNames from "classnames/bind";


function ButtonGroup(props) {
    const initialButtons = [
        { id: 1, label: "Button 1", icon: "üî•", isDisabled: false },
        { id: 2, label: "Button 2", icon: "üíß", isDisabled: false },
        { id: 3, label: "Button 3", icon: "üå±", isDisabled: true },
        { id: 4, label: "Button 4", icon: "‚ö°", isDisabled: false },
    ];
    const initialState = initialButtons.map(item => {
        return {
            ...item,
            isActive: false
        }
    })

    const [buttonsActiveList , setButtonsList] = useState(initialState)


    const handleButtonClick = (id) => {
        const find = buttonsActiveList.find((item) => item.id === id);
        if (find && !find.isDisabled) {
            const updatedButtons = buttonsActiveList.map((item) => {
                if (item.id === id) {
                    return {
                        ...item,
                        isActive: !item.isActive
                    };
                }
                return item;
            });
            setButtonsList(updatedButtons);
        }
    }
    const handleReset = () => {
        setButtonsList(initialState);
    }
    const cx = classNames.bind(styles);



    return (
        <div>
            <h1>Active {buttonsActiveList.filter(data => data.isActive)?.length}</h1>
            <ul>
                {buttonsActiveList.map((item)=> {
                    return (
                        <>
                            <Button
                                key={`${item.label}_${item.id}`}
                                id={item.id}
                                label={item.label}
                                icon={item.icon}
                                isActive={item.isActive}
                                isDisabled={item.isDisabled}
                                handleClick={handleButtonClick}
                            />
                        </>
                    )
                })}
            </ul>
            <button className={cx('button')} onClick={handleReset}>Reset</button>
        </div>
    );
}

export default ButtonGroup;

--- /home/runner/work/react-typescript/react-typescript/src/components/Button/Button.tsx ---

import React, {useState} from 'react';
import classNames from "classnames/bind";
import styles from "./ButtonGroup.module.css";

interface ButtonProps {
    id : number;
    label : string;
    icon : string;
    isDisabled : boolean;
    isActive : boolean
    handleClick: (id: number) => void;
}

function Button(props:ButtonProps) {
    const cx = classNames.bind(styles);

    const { id, label, icon, isDisabled, handleClick , isActive } = props;

    return (
        <>
            <li key={`${label}_${id}`}>
                <button
                    className={cx('button', {
                        'active': isActive,
                        'disabled': isDisabled,
                        'highlight': id ===2,
                    })}
                    disabled={isDisabled}
                    onClick={() =>handleClick(id)}
                >
                    {`${icon}${label}`}
                </button>
            </li>
        </>
    );
}

export default Button;

--- /home/runner/work/react-typescript/react-typescript/src/App.tsx ---

import {useState} from "react";
import TrafficLight from "./components/TrafficLight/TrafficLight";

function App() {

    const [light , setLight] = useState<'red' | 'yellow' | 'green'>('red');

    const handleClick = (color: 'red' | 'yellow' | 'green') => {
        switch (color) {
            case 'red':
            setLight('yellow');
            break;
        case 'yellow':
            setLight('green');
            break;
        case 'green':
            setLight('red');
            break;
        default:
            console.error('Invalid color');
            setLight('red');
            break;
        }
    }


  return (
    <>
        <TrafficLight light={light} handleClick={handleClick}/>
    </>
  )
}

export default App


--- /home/runner/work/react-typescript/react-typescript/src/components/Button.tsx ---

import React from 'react';

interface ButtonProps {
    children: React.ReactNode;
    message: string;

}



function Button({children , message}: ButtonProps) {
    console.log('this is message');
    const handleClick = () => alert(message);

    return (
        <>
            <button onDoubleClick={handleClick}>{children}</button> // Îß§Í∞úÎ≥ÄÏàòÍ∞Ä ÏóÜÏùÑÎñÑ
            <button onClick={()=> handleClick()}>{children}</button> //Îß§Í∞úÎ≥ÄÏàòÍ∞Ä Ï°¥Ïû¨Ìï†Îïå ÏúÑÏôÄ Í∞ôÏù¥ ÏûëÏÑ±

        </>
    );
}

export default Button;

--- /home/runner/work/react-typescript/react-typescript/src/components/CalculatorV2/CountButton.tsx ---

import React, {Dispatch} from 'react';

interface CountButtonProps {
    handleIncrement: () => void;
    handleDecrement: () => void;
    handleReset: () => void;
}

function CountButton(props:CountButtonProps) {
    const {handleIncrement , handleDecrement , handleReset} = props;

    return (
        <>
            <button name="increment" onClick={handleIncrement}>increment</button>
            <button name="decrement" onClick={handleDecrement}>decrement</button>
            <button name="reset" onClick={handleReset}>reset</button>
        </>
    );
}

export default CountButton;

--- /home/runner/work/react-typescript/react-typescript/src/components/CalculatorV2/Count.tsx ---

import React, {useReducer, useState} from 'react';
import CountDisplay from "./CountDisplay";
import CountButton from "./CountButton";
import counterReducer from "../../reducer/counterReducer";

function Count() {

    const [count, countDispatch] = useReducer(counterReducer,0);

    const handleIncrement = () => countDispatch({type: "INCREMENT"});
    const handleDecrement = () => countDispatch({type: "DECREMENT"});
    const handleReset = () => countDispatch({type: "RESET"});


    return (
        <>
            <h3>This is Count App</h3>
            <CountDisplay count={count} />
            <CountButton
                handleIncrement={handleIncrement}
                handleDecrement={handleDecrement}
                handleReset={handleReset}
            />

        </>
    );
}

export default Count;

--- /home/runner/work/react-typescript/react-typescript/src/components/Calculator/Calculator.tsx ---

import React from 'react';

function Calculator() {
    const [count, setCount] = React.useState<number>(0);

    const handleIncrement = () => {
        setCount(prevCount => prevCount + 1);
    }

    const handleDecrement = () => {
        setCount(prevCount => prevCount - 1);
    }

    const handleReset = () => {
        setCount(0);
    }


    return (
        <>
            <h1>Calculator Component</h1>
            <p>Count: {count}</p>
            <button onClick={handleIncrement}>Increment</button>
            <button onClick={handleDecrement}>Decrement</button>
            <button onClick={handleReset}>Reset</button>
        </>
    );
}

export default Calculator;

--- /home/runner/work/react-typescript/react-typescript/src/components/Button/ButtonGroup.tsx ---

import React, {useState} from 'react';
import Button from "./Button";
import styles from "./ButtonGroup.module.css";
import classNames from "classnames/bind";


function ButtonGroup(props) {
    const initialButtons = [
        { id: 1, label: "Button 1", icon: "üî•", isDisabled: false },
        { id: 2, label: "Button 2", icon: "üíß", isDisabled: false },
        { id: 3, label: "Button 3", icon: "üå±", isDisabled: true },
        { id: 4, label: "Button 4", icon: "‚ö°", isDisabled: false },
    ];
    const initialState = initialButtons.map(item => {
        return {
            ...item,
            isActive: false
        }
    })

    const [buttonsActiveList , setButtonsList] = useState(initialState)


    const handleButtonClick = (id) => {
        const find = buttonsActiveList.find((item) => item.id === id);
        if (find && !find.isDisabled) {
            const updatedButtons = buttonsActiveList.map((item) => {
                if (item.id === id) {
                    return {
                        ...item,
                        isActive: !item.isActive
                    };
                }
                return item;
            });
            setButtonsList(updatedButtons);
        }
    }
    const handleReset = () => {
        setButtonsList(initialState);
    }
    const cx = classNames.bind(styles);



    return (
        <div>
            <h1>Active {buttonsActiveList.filter(data => data.isActive)?.length}</h1>
            <ul>
                {buttonsActiveList.map((item)=> {
                    return (
                        <>
                            <Button
                                key={`${item.label}_${item.id}`}
                                id={item.id}
                                label={item.label}
                                icon={item.icon}
                                isActive={item.isActive}
                                isDisabled={item.isDisabled}
                                handleClick={handleButtonClick}
                            />
                        </>
                    )
                })}
            </ul>
            <button className={cx('button')} onClick={handleReset}>Reset</button>
        </div>
    );
}

export default ButtonGroup;

--- /home/runner/work/react-typescript/react-typescript/src/components/Button/Button.tsx ---

import React, {useState} from 'react';
import classNames from "classnames/bind";
import styles from "./ButtonGroup.module.css";

interface ButtonProps {
    id : number;
    label : string;
    icon : string;
    isDisabled : boolean;
    isActive : boolean
    handleClick: (id: number) => void;
}

function Button(props:ButtonProps) {
    const cx = classNames.bind(styles);

    const { id, label, icon, isDisabled, handleClick , isActive } = props;

    return (
        <>
            <li key={`${label}_${id}`}>
                <button
                    className={cx('button', {
                        'active': isActive,
                        'disabled': isDisabled,
                        'highlight': id ===2,
                    })}
                    disabled={isDisabled}
                    onClick={() =>handleClick(id)}
                >
                    {`${icon}${label}`}
                </button>
            </li>
        </>
    );
}

export default Button;
```json
{
  "app.invalidColor": "Invalid color",
  "button.thisIsMessage": "this is message",
  "buttonGroup.button1": "Button 1",
  "buttonGroup.button2": "Button 2",
  "buttonGroup.button3": "Button 3",
  "buttonGroup.button4": "Button 4",
  "buttonGroup.reset": "Reset",
  "calculator.calculatorComponent": "Calculator Component",
  "calculator.increment": "Increment",
  "calculator.decrement": "Decrement",
  "calculator.reset": "Reset",
  "count.thisIsCountApp": "This is Count App",
  "countButton.increment": "increment",
  "countButton.decrement": "decrement",
  "countButton.reset": "reset",
  "countDisplay.countDisplay": "CountDisplay",
  "count.increment": "Increment",
  "count.decrement": "Decrement",
  "count.reset": "Reset",
  "footer.footerComponent": "Footer Component",
  "fruits.fruitName": "Í≥ºÏùº Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!",
  "fruits.alreadyAddedFruit": "Ïù¥ÎØ∏ Ï∂îÍ∞ÄÎêú Í≥ºÏùºÏûÖÎãàÎã§.",
  "fruits.addFruit": "Í≥ºÏùº Ï∂îÍ∞Ä",
  "header.headerComponent": "Header Component",
  "nav.navComponent": "Nav Component",
  "inline.test": "TEST!!!!!!",
  "userInfoView.userInfoView": "UserInfoView",
  "userView.userView": "UserView",
  "welcome.welcome": "Welcome!",
  "loginStatus.loginStatus": "LoginStatus",
  "loginUser.welcomeUser": "ÌôòÏòÅÌï©ÎãàÎã§, ÏÇ¨Ïö©Ïûê !",
  "loginUser.logout": "Logout",
  "logoutUser.loginRequired": "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§",
  "logoutUser.login": "Login",
  "loginV3.welcomeBack": "Welcome Back!",
  "loginV3.pleaseSignIn": "Please Sign In",
  "main.mainComponent": "Main Component",
  "main.array": "Î∞∞Ïó¥",
  "main.object": "Í∞ùÏ≤¥",
  "main.functionReturnValue": "Ìï®Ïàò Î¶¨ÌÑ¥Í∞í!",
  "main.regularExpression": "Ï†ïÍ∑ú ÌëúÌòÑÏãù",
  "main.date": "Date",
  "main.map": "Map",
  "main.set": "Set",
  "main.login": "Login",
  "main.clickMe": "Click Me",
  "main.clickMeToo": "Click Me Too",
  "main.loginPlease": "Login Please",
  "main.state": "section5. STATE",
  "notShowNoti.viewNotification": "ÏïåÎ¶º Î≥¥Í∏∞",
  "showNoti.newNotification": "üì¢ ÏÉàÎ°úÏö¥ ÏïåÎ¶ºÏù¥ ÎèÑÏ∞©ÌñàÏäµÎãàÎã§!",
  "showNoti.closeNotification": "ÏïåÎ¶º Îã´Í∏∞",
  "firstComponent.firstComponent": "First Component",
  "firstComponent.increment": "Increment",
  "secondComponent.secondComponent": "Second Component",
  "secondComponent.increment": "Increment",
  "printValue.printValue": "PrintValue",
  "printValueV2.printValue": "PrintValue",
  "recipe.removeRecipe": "Remove Recipe",
  "recipeList.recipes": "Recipes!üçé",
  "count.increment": "Increment",
  "count.incrementV2": "Increment V2",
  "profile.updateProfile": "Update Profile",
  "statePractice.statePractice": "State Practice",
  "statePractice.changeState": "Change State",
  "statePracticeV2.statePracticeV2": "State Practice V2",
  "statePracticeV2.changeNameToJane": "Change Name to Jane",
  "statePracticeV3.changeStateTo10": "Change State to 10",
  "statusMessage.operationWasSuccessful": "Operation was successful!",
  "statusMessage.anErrorOccurred": "An error occurred. Please try again.",
  "statusMessage.warningPleaseCheckYourInput": "Warning! Please check your input.",
  "statusMessage.thisIsAnInformationalMessage": "This is an informational message.",
  "table.mike": "MIKE",
  "trafficLight.light": "Light ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è",
  "trafficLight.changeColor": "Change Color",
  "trafficLight.light.1": "Light üíõüíõüíõ",
  "trafficLight.changeColor.1": "Change Color",
  "trafficLight.light.2": "Light üíöüíöüíö",
  "trafficLight.changeColor.2": "Change Color",
  "button.helloReactjs": "Hello, ReactJS!",
  "button.test": "TEST",
  "button.button": "button",
  "button.activeButton": "Active Button",
  "formV2.naver": "NAVER",
  "formV2.submit": "SUBMIT",
  "fruits.updateFruits": "update fruits",
  "userProfile.name": "Ïù¥Î¶Ñ",
  "userProfile.age": "ÎÇòÏù¥",
  "userProfile.adminAccount": "Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï",
  "userProfile.generalUser": "ÏùºÎ∞ò ÏÇ¨Ïö©Ïûê",
  "userV2.userInformation": "User Information",
  "userV3.name": "Ïù¥Î¶Ñ",
  "userV3.age": "ÎÇòÏù¥",
  "userV3.adminAccount": "Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï",
  "userV4.updateUserInfo": "Update User Info"
}
```
